<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="_4.mapper.StoreMapper">
<sql id="storeBaseColumn">
STORE_NUM, BUSS_REGIST_NUM, OWNER_NUM, STORE_NAME, STORE_TYPE, STORE_INTRODUCTION, STORE_CLOSED_DATE, STORE_OPEN_TIME, STORE_OPEN_DATE
, STORE_ADDR, STORE_ADDR_DETAIL, STORE_CROWDED, STORE_PROFILE_IMAGE, STORE_PROFILE_STORE_IMAGE, STORE_DETAIL_IMAGE, STORE_DETAIL_STORE_IMAGE 
</sql>
<sql id="depositBaseColumn">
deposit_num, store_num, start_price, end_price, deposit_rate
</sql>

<insert id="waitNumInsert" parameterType="waitNumDTO">
insert into waiting_number (store_num, book_num, wait_num) values (#{storeNum}, #{bookNum}, #{waitNum})
</insert>
<select id="waitNumSelectOne" parameterType="string" resultType="waitNumDTO">
select store_num, book_num, wait_num from waiting_number where book_num = #{bookNum}
</select>
<select id="waitNumSelectAll" parameterType="string" resultType="waitNumDTO">
select store_num, book_num, wait_num from waiting_number where store_num = #{storeNum} order by wait_num
</select>

<select id="storeSelectOne" parameterType="string" resultType="storeDTO">
	select <include refid="storeBaseColumn"/> from store 
	where owner_num = #{ownerNum} or store_num = #{ownerNum}
</select>
<select id="storeSelectAll" resultType="storeDTO">
select <include refid="storeBaseColumn"></include> from store
</select>
<select id="storeNumSelect" parameterType="string" resultType="string">
select store_num from store where owner_num = #{ownerNum}
</select>
<select id="WishCheck" parameterType="string">
select 1 from wish where mem_num = #{memNum} and store_num = #{storeNum}
</select>
<select id="wishSelectList" parameterType="string" resultType="storeDTO">
select <include refid="storeBaseColumn"></include> from store 
where STORE_NUM in (select STORE_NUM from wish where mem_num = #{memberNum})
</select>
<select id="depositSettingSelect" parameterType="string" resultType="depositDTO">
select <include refid="depositBaseColumn"/> from deposit where store_num = #{storeNum} order by deposit_num
</select>
<select id="storeSearch" parameterType="string" resultType="storeDTO">
select <include refid="storeBaseColumn"/> from store where store_name like '%' || #{storeName} || '%'
</select>

<select id="waitNumCheck" parameterType="string" resultType="integer">
select max(wait_num) from waiting_number where store_num = #{storeNum}
</select>

<update id="storeUpdate" parameterType="storeDTO">
update store set store_introduction = #{storeIntroduction}, store_closed_date = #{storeClosedDate}
, store_open_time = #{storeOpenTime}, STORE_CROWDED = #{storeCrowded}
			   <if test="storeProfileImage != null">
			   , store_profile_image = #{storeProfileImage}, store_profile_store_image = #{storeProfileStoreImage}
			   </if>
			   <if test="storeDetailImage != null">
			   , store_detail_image = #{storeDetailImage}, store_detail_store_image = #{storeDetailStoreImage}
			   </if>
			   , store_addr_detail = #{storeAddrDetail}
 where store_num = #{storeNum}
</update>


<update id="depositSettingUpdate" parameterType="depositDTO">
merge into deposit d
 using (select store_num from store where store_num = #{storeNum}) s
 on (d.store_num = s.store_num and deposit_num = #{depositNum})
	when matched then
		update set start_price = #{startPrice}, end_price = #{endPrice}, deposit_rate = #{depositRate}
	when not matched then
		insert (deposit_num, store_num, start_price, end_price, deposit_rate) values 
 		((select nvl(max(deposit_num),0)+1 from deposit where store_num = #{storeNum}), #{storeNum}, #{startPrice}, #{endPrice}, #{depositRate})
</update>

<delete id="waitNumDelete" parameterType="string">
delete from waiting_number where book_num = #{bookNum}
</delete>
</mapper>